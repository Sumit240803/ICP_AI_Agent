type Account = record {
    owner : principal;
    subaccount : opt blob;
};

type TransferArgs = record {
    from_subaccount : opt blob;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type TransferResult = variant {
    Ok : nat;
    Err : TransferError;
};

type Transaction = record {
    id : nat64;
    from : Account;
    to : Account;
    amount : nat;
    timestamp : nat64;
    memo : opt blob;
};

type Task = record {
    id : nat64;
    data : text;
    frequency : nat64;
    last_run : nat64;
    url : opt text;
    action_type : text;
    enabled : bool;
};

service : {
    // Task functions
    create_task : (nat64, text, nat64) -> ();
    create_task_complete : (nat64, text, nat64, opt text, text) -> (nat64);
    update_task : (nat64, opt text, opt nat64, opt text, opt text, opt bool) -> ();
    get_tasks : () -> (vec Task) query;
    get_task : (nat64) -> (opt Task) query;
    delete_task : (nat64) -> ();
    execute_tasks : () -> ();
    retire_agent : () -> ();
    cycles_available : () -> (nat64) query;

    // Token task functions
    create_token_init_task : (text, text, nat8, opt text, opt text, nat, nat) -> (nat64);
    create_token_transfer_task : (Account, nat, opt vec nat8) -> (nat64);
    create_token_mint_task : (Account, nat) -> (nat64);
    create_token_burn_task : (Account, nat) -> (nat64);
    create_token_operation_task : (nat64, text, text, nat64) -> ();
    get_token_tasks_by_type : (text) -> (vec Task) query;
    get_tasks_by_type : (text) -> (vec Task) query;

    // Token functions
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_fee : () -> (nat) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_balance_of : (Account) -> (nat) query;
    icrc1_transfer : (TransferArgs) -> (TransferResult);
    icrc1_metadata : () -> (vec record { text; text }) query;
    
    // Token Initialization
    icrc1_init : (text, text, nat8, opt text, opt text, nat, nat) -> (bool);
    
    // Extended Methods
    mint : (Account, nat) -> (TransferResult);
    burn : (Account, nat) -> (TransferResult);
    get_transactions : (nat64) -> (vec Transaction) query;
    get_all_accounts : () -> (vec record { Account; nat }) query;
}