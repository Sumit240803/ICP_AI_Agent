// Candid interface definition for ICP AI Agent Token functionality

type Token = record {
    id : text;
    owner : principal;
    created_at : nat64;
    expires_at : opt nat64;
    metadata : vec record { text; text; };
    balance : nat64;
};

// Task record used by agent management APIs


// ---- Shared Types ----

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    InsufficientAllowance : record { allowance : nat };
    GenericError : record { error_code : nat; message : text };
};
type APIResponse = variant {
  Text : text;
  PairList : vec record { text; text };
};

type Task = record {
  tool: text;
  params: text;
};

type Schedule = variant {
  Interval: record { interval_days: nat64 };
  Cron: record { expression: text };
};

type AgentConfig = record {
  agent_id: nat64;
  name: text;
  description: text;
  owner: principal;
  schedule: Schedule;
  tasks: vec Task;
  created_at: int;
  prompt: text;
  next_run: opt int;
};


service : {
    // Token management
    create_token : (vec record { text; text; }, nat64, opt nat64) -> (text);
    get_token : (text) -> (opt Token) query;
    get_user_tokens : (opt principal) -> (vec Token) query;
    update_token_metadata : (text, vec record { text; text; }) -> (bool);
    transfer_token : (text, principal, nat64) -> (bool);
    burn_token : (text) -> (bool);
    is_token_valid : (text) -> (bool) query;
    
    // Agent management functions (original API)
    create_task : (nat64, text, nat64) -> ();
    create_task_complete : (nat64, text, nat64, opt text, text) -> ();
    update_task : (nat64, opt text, opt nat64, opt text, opt text, opt bool) -> ();
    get_tasks : () -> (vec Task) query;
    get_task : (nat64) -> (opt Task) query;
    delete_task : (nat64) -> ();
    execute_tasks : () -> ();
    retire_agent : () -> ();
    cycles_available : () -> (nat64) query;

    // ---- ICRC-2 Token methods ----
    icrc2_init : (text, text, nat8, opt text, opt text, nat, nat) -> (APIResponse);

    icrc2_mint : (record { owner : principal; subaccount : opt blob }, nat, text) -> (APIResponse);


    icrc2_transfer : (record {
        from_subaccount : opt blob;
        to : record { owner : principal; subaccount : opt blob };
        amount : nat;
        fee : opt nat;
        memo : opt vec nat8;
        created_at_time : opt nat64;
    }) -> (variant { Ok : nat; Err : TransferError });

    icrc2_approve : (record {
        from_subaccount : opt blob;
        spender : record { owner : principal; subaccount : opt blob };
        amount : nat;
        expected_allowance : opt nat;
        expires_at : opt nat64;
        fee : opt nat;
        memo : opt vec nat8;
        created_at_time : opt nat64;
    }) -> (variant { Ok : nat; Err : TransferError });

    icrc2_transfer_from : (record {
        spender_subaccount : opt blob;
        from : record { owner : principal; subaccount : opt blob };
        to : record { owner : principal; subaccount : opt blob };
        amount : nat;
        fee : opt nat;
        memo : opt vec nat8;
        created_at_time : opt nat64;
    }) -> (variant { Ok : nat; Err : TransferError });

    icrc2_allowance : (record {
        account : record { owner : principal; subaccount : opt blob };
        spender : record { owner : principal; subaccount : opt blob };
    }) -> (nat) query;

    icrc2_balance_of : (record { owner : principal; subaccount : opt blob }) -> (nat) query;

    icrc2_fee : (text) -> (nat) query;
    icrc2_total_supply : (text) -> (nat) query;
    icrc2_name : (text) -> (text) query;
    icrc2_symbol : (text) -> (text) query;
    icrc2_decimals : (text) -> (nat8) query;
    icrc2_minting_account : (text) -> (opt record { owner : principal; subaccount : opt blob }) query;
    icrc2_get_transactions : (nat64) -> (vec record {
        id : nat64;
        from : record { owner : principal; subaccount : opt blob };
        to : record { owner : principal; subaccount : opt blob };
        amount : nat;
        timestamp : nat64;
        memo : opt vec nat8;
    }) query;
    icrc2_get_all_accounts : (text) -> (vec record {
        account : record { owner : principal; subaccount : opt blob };
        balance : nat;
    }) query;
    icrc2_metadata :(text) -> (APIResponse);
    icrc2_get_all_records : () -> (APIResponse);

    initialize_agent : ()-> ();
    create_agent: (AgentConfig) -> (variant { ok: AgentConfig; err: text });

    
};